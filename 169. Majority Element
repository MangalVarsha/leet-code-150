# leet-code-150
leet code  Interview Question

Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2

solution--------------------------------
class Solution {
    public int majorityElement(int[] nums) {
         Map<Integer, Integer> map = new HashMap<>();
    for (int num: nums) {
        if (map.containsKey(num))
            map.put(num, map.get(num) + 1);
        else
            map.put(num, 1);
        if (map.containsKey(num) && map.get(num) > nums.length/2)
            return num;
    }
    return -1;
}
public int majorityElement2(int[] nums) {
    Arrays.sort(nums);
    return nums[nums.length/2];
}
public int majorityElement3(int[] nums) {
    int majority = 0;
    int count = 0;
    for (int num: nums) {
        if (count == 0)
            majority = num;
        if (num == majority)
            count ++;
        else 
            count--;
    }
    return majority;
}
}

